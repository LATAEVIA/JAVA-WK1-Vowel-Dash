dependencies {
  compile group: 'com.sparkjava', name: 'spark-core', version: '2.3'
  compile group: 'org.apache.velocity', name: 'velocity', version: '1.7'
  testCompile group: 'junit', name: 'junit', version: '4.+'
  testCompile group: 'org.fluentlenium', name: 'fluentlenium-core', version: '0.10.3'
  testCompile group: 'org.fluentlenium', name: 'fluentlenium-assertj', version: '0.10.3'
}


// import java.util.ArrayList;
// import java.util.Map;
// import java.util.HashMap;
// import spark.ModelAndView;
// import spark.template.velocity.VelocityTemplateEngine;
// import static spark.Spark.*;

public class VowelDash {
  public static void main(String[] args) {}

  public Boolean isVowelDash (Integer year) {
  // eventually put your code here
  return false;
  // public String replace(String original, String find, String replace) {
  //   return original.replaceAll(find, replace);
  }
}


//   public static void main(String[] args) {
//   String layout = "templates/layout.vtl";
//
//   get("/", (request, response) -> {
//      Map<String, Object> model = new HashMap<String, Object>();
//      model.put("template", "templates/home.vtl");
//      return new ModelAndView(model, layout);
//    }, new VelocityTemplateEngine());
//
//    get("/results", (request, response) -> {
//       Map<String, Object> model = new HashMap<String, Object>();
//       model.put("template", "templates/results.vtl");
//
//       String input = request.queryParams("text");
//       String toFind = request.queryParams("toFind");
//       String toReplace = request.queryParams("toReplace");
//       String finished = findReplace(input, toFind, toReplace);
//
//       model.put("finished", finished);
//       return new ModelAndView(model, layout);
//     }, new VelocityTemplateEngine());
//   }
//   public static String findReplace(String input, String toFind, String toReplace) {
//     String[] phraseSplit = input.split(" ");
//     String lowerCaseFind = toFind.toLowerCase();
//     for ( Integer i = 0; i < phraseSplit.length; i++) {
//       String lowerCaseIndex = phraseSplit[i].toLowerCase();
//       if (lowerCaseIndex.equals(lowerCaseFind)) {
//       phraseSplit[i] = lowerCaseIndex.replace(toFind, toReplace);
//       }
//     }
//     String finishedPhrase = "";
//     for ( String phraseWord : phraseSplit) {
//       finishedPhrase = finishedPhrase + " " + phraseWord;
//     }
//     finishedPhrase = finishedPhrase.trim();
//     return finishedPhrase;
//   }
//
// }









import org.junit.*;
import static org.junit.Assert.*;

public class VowelDash {

  @Test
  public void isVowelDash_forGiveInputReceiveOutput_SameString() {
    // VowelDash testVowelDash = new VowelDash( );
    // String testString = "Vowel Dash gives an output!";
    // assertEquals(testString, testFindAndReplace.replace(testString, testString, testString));
  }
}

//   @Test
//   public void CheckString_ReplaceWordsAnywhere_NewString() {
//     FindAndReplace testFindAndReplace = new FindAndReplace( );
//     String testString = "cat in a cathedral";
//     assertEquals("dog in a doghedral", testFindAndReplace.replace(testString, "cat", "dog"));
//   }
//
//   @Test
//   public void CheckString_ReplaceOnlyCompleteWords_NewString() {
//     FindAndReplace testFindAndReplace = new FindAndReplace( );
//     assertEquals("dog in a cathedral", testFindAndReplace.replace(cat in a cathedral, "cat", "dog"));
//
//   @Test
//   public void CheckString_ReplaceCapsCorrectly_NewString() {
//     FindAndReplace testFindAndReplace = new FindAndReplace( );
//     assertEquals("dog in al cathedral", testFindAndReplace.replace(cat in a cathedral, "cat", "dog"));
//   }
//
//
// @Test
//  public void findReplace_changeAllInstanceOfOneWordToAnother_changedString() {
//    FindAndReplace testFindAndReplace = new FindAndReplace();
//    String userInput = "I went to sleep yesterday";
//    assertEquals("I went to class yesterday", testFindAndReplace.findReplace(userInput, "sleep", "class"));
//  }
//  @Test
//  public void findReplace_wontChangePartialWordMatches_changedString() {
//    FindAndReplace testFindAndReplace = new FindAndReplace();
//    String userInput = "I am walking my cat to the cathedral";
//    assertEquals("I am walking my dog to the cathedral", testFindAndReplace.findReplace(userInput, "cat", "dog"));
//  }
//  @Test
//  public void findReplace_willReplaceDifferentlyCapitalizedWords_changedString() {
//    FindAndReplace testFindAndReplace = new FindAndReplace();
//    String userInput = "I am walking my cat to the Park";
//    assertEquals("I am walking my cat to the beach", testFindAndReplace.findReplace(userInput, "park", "beach"));
//  }
